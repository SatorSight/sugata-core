module PdfUploaderHelper
  class PdfUploader

    def initialize
      #todo to config
      @temp_dir = 'tmp/pdf/'
      Dir.mkdir(@temp_dir) unless File.directory? @temp_dir
      @dir_path = get_available_temp_folder_path
    end

    # remove some redunant autogenerated stuff
    def clean_html(path)
      cleaned_dir = path + '/html_cleaned'
      cleaned_path = cleaned_dir + '/source.html'
      Dir.mkdir(cleaned_dir)
      FileUtils.cp(path + '/html/source.html', cleaned_dir)
      FileUtils.cp(path + '/html/bg1.jpg', cleaned_dir) rescue nil
      html_file = File.open(cleaned_path)
      html = html_file.read
      html_file.close
      html.sub! '<img alt="" src="pdf2htmlEX-64x64.png"/>', ''
      html.sub! 'class="pf ', 'class="'
      html.sub! '<script src="compatibility.js"></script>', ''
      html.sub! '<script src="pdf2htmlEX.min.js"></script>', ''
      html.sub! '<div id="page-container">', '<div>'
      html.sub! '<div id="sidebar">', '<div>'
      html.sub! '<div id="outline">', '<div>'
      html.sub! 'src="bg1.jpg"', 'src="/uploaded_images/bg1.jpg"'
      html.sub! '<div class="loading-indicator">', '<div>'
      html.sub! 'pdf2htmlEX.defaultViewer = new pdf2htmlEX.Viewer({});', ''
      File.write(cleaned_path, html)
    end

    # change line breaks to <p> and <br> tags
    def clean_text(path)
      text_file_path = path + '/source.txt'
      text_file = File.open(text_file_path)
      text = text_file.read

      text = text.gsub(/\n\n/, '%%%')
                 .gsub(/\n/, '<br />')
                 .gsub(/%%%/, '</p><p>')
                 .gsub(/^(.*)$/, '<p>\1</p>')
      text.sub! '<br />', ''

      text_file.close
      File.write(text_file_path, text)
    end

    # get full contents generated by all tools
    def get_issue_contents_array(path)
      pages_array = []
      pages_dirs = Dir["#{path}/*"]
      pages_dirs.each do |page_dir|
        page_number = page_dir[page_dir.rindex('/') + 1 .. -1]
        page_text = File.open("#{path}/#{page_number}/source.txt").read
        page_images = Dir["#{path}/#{page_number}/images/*.jpg"] + Dir["#{path}/#{page_number}/images/*.png"] + Dir["#{path}/#{page_number}/images/*.jpeg"]

        bg_image = "#{path}/#{page_number}/html_cleaned/bg1.jpg"
        html = File.open("#{path}/#{page_number}/html_cleaned/source.html").read

        page_hash = {
            number: page_number,
            text: page_text,
            images: page_images,
            html: html,
            bg_image: bg_image,
        }

        pages_array.push page_hash
      end
      pages_array
    end

    def get_available_temp_folder_path
      path = 'tmp/pdf/decomposed'
      counter = 1
      while File.directory? path and counter < 10000
        new_path = path + '_' + counter.to_s
        return new_path unless File.directory? new_path
        counter += 1
      end
      path
    end

    # replace bg path in html and save article
    def replace_html_with_new_bg(article)
      if article.desktop_bg
        article.desktop_html = article.desktop_html.sub('src="/uploaded_images/bg1.jpg"', 'src="' + article.desktop_bg + '"')
        article.save
      end
    end

    # rip all images
    def drop_images(path)
      Dir.mkdir(path + '/images')
      `cd #{path}; pdfimages -png -j source.pdf images/1`
    end

    # rip texts with docripper to /source.txt file, clean them
    def drop_texts(path)
      DocRipper::rip(path + '/source.pdf')
      clean_text path
    end

    def drop_html(path)
      `cd #{path}; pdf2htmlEX --fit-width=1024 --optimize-text=1 --bg-format=jpg --embed ijf --dest-dir=html source.pdf`
      clean_html path
      remove_excess_styles path
      move_fonts path
    end

    # copy article fonts to /uploaded_fonts and replace pathes in cleaned html
    # if font file existed (checked by filesize), use it
    def move_fonts(path)
      fonts_path = 'public/uploaded_fonts/'
      cleaned_html = path + '/html_cleaned/source.html'
      font_files = Dir["#{path}/html/*.woff"]
      font_uploaded_files = Dir['public/uploaded_fonts/*.woff']

      font_files.each do |file|
        file_size = File.size? file
        path = get_free_file_name_in_dir(fonts_path)
        font_uploaded_files.each{|f| path = f if File.size?(f) == file_size}

        final_path = path.include?('public') ? path : fonts_path + path
        FileUtils.cp(file, final_path) unless File.exists?(final_path)
        final_path.sub! 'public',''

        html = File.open(cleaned_html)
        file_name = File.basename file

        new_html = html.read.sub(file_name, final_path)
        html.close
        File.write cleaned_html, new_html
      end
    end

    # remove some autogenerated styles
    def remove_excess_styles(path)
      html_path = path + '/html_cleaned/source.html'
      html_file = File.open(html_path)
      html = html_file.read
      html_file.close

      # style below makes all blocks white-space: pre and absolute position
      style = '<style>.t{position:absolute;white-space:pre;font-size:1px;transform-origin:0 100%;-ms-transform-origin:0 100%;-webkit-transform-origin:0 100%;unicode-bidi:bidi-override;-moz-font-feature-settings:"liga" 0}</style>'

      # style = ''

      html.gsub!(/<style.*?sidebar.*?<\/style>/im, style)
      html.gsub!(/<style.*?@keyframe.*?<\/style>/im, '')
      # html.gsub!(/@media print.*?;}.}/im, '')
      html.sub!('<!-- Created by pdf2htmlEX (https://github.com/coolwanglu/pdf2htmlex) -->', '')

      File.write(html_path, html)
    end

    # used to get free filename for fonts (.woff)
    def get_free_file_name_in_dir(dir)
      font_name = '.woff'
      begin
        font_name = randomize_name(font_name)
        new_path = dir + font_name
      end while File.exists? new_path
      font_name
    end

    # prepend random character (0-9, a-z) to filename
    def randomize_name(name)
      a = []
      10.times{|i| a.push(i)}
      a = a + ('a'..'z').to_a
      a.sample.to_s << name
    end

    def drop_files(path)
      drop_images path
      drop_texts path
      drop_html path
    end

    #todo refactor those two
    def save_file_to_temp(file)
      path = get_temp_pdf_path
      File.open(path, 'wb') {|f| f.write(file.read)}
      path
    end

    #todo random characters
    def get_temp_pdf_path
      filename = '1.pdf'
      path = File.join('tmp', 'pdf', filename)
      counter = 1
      while File.exists?(path) and counter < 10000
        path = File.join('tmp', 'pdf', counter.to_s + filename)
        counter += 1
      end
      path
    end

    def decompose(path)
      just_file_name = path[path.rindex('/') + 1 .. -1]
      source_path = @temp_dir + just_file_name

      Dir.mkdir @dir_path
      pages = CombinePDF.load(source_path).pages
      i = 0

      pages.each do |page|
        page_path = "#{@dir_path}/#{i}"
        Dir.mkdir(page_path) unless File.exists?(page_path)

        pdf = CombinePDF.new
        pdf << page
        pdf.save("#{page_path}/source.pdf")

        # drop images to /images and text to source.txt and html inside page dir
        drop_files page_path
        i += 1
      end

      get_issue_contents_array(@dir_path)
    end

    # clear temp dir contents
    def clean
      FileUtils.rm_rf(@dir_path, secure: true)
    end

    # different text ripping algorythm usage
    # data = File.read 'public/temp/decombined_pdf/9.pdf'
    # text = Yomu.read :text, data
  end
end